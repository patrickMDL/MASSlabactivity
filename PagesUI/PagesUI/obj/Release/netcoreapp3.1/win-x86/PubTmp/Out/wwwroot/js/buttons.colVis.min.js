!function (e) { "function" == typeof define && define.amd ? define(["jquery", "datatables.net", "datatables.net-buttons"], function (n) { return e(n, window, document) }) : "object" == typeof exports ? module.exports = function (n, t) { return n || (n = window), t && t.fn.dataTable || (t = require("datatables.net")(n, t).$), t.fn.dataTable.Buttons || require("datatables.net-buttons")(n, t), e(t, n, n.document) } : e(jQuery, window, document) }(function (n, t, e, i) { return t = n.fn.dataTable, n.extend(t.ext.buttons, { colvis: function (n, t) { return { extend: "collection", text: function (n) { return n.i18n("buttons.colvis", "Column visibility") }, className: "buttons-colvis", buttons: [{ extend: "columnsToggle", columns: t.columns, columnText: t.columnText }] } }, columnsToggle: function (n, t) { return n.columns(t.columns).indexes().map(function (n) { return { extend: "columnToggle", columns: n, columnText: t.columnText } }).toArray() }, columnToggle: function (n, t) { return { extend: "columnVisibility", columns: t.columns, columnText: t.columnText } }, columnsVisibility: function (n, t) { return n.columns(t.columns).indexes().map(function (n) { return { extend: "columnVisibility", columns: n, visibility: t.visibility, columnText: t.columnText } }).toArray() }, columnVisibility: { columns: i, text: function (n, t, e) { return e._columnText(n, e) }, className: "btn btn-complete btn-sm btn-block", action: function (n, t, e, o) { t = (n = t.columns(o.columns)).visible(), n.visible(o.visibility !== i ? o.visibility : !(t.length && t[0])) }, init: function (e, n, o) { var i = this; e.on("column-visibility.dt" + o.namespace, function (n, t) { !t.bDestroying && t.nTable == e.settings()[0].nTable && i.active(e.column(o.columns).visible()) }).on("column-reorder.dt" + o.namespace, function () { 1 === e.columns(o.columns).count() && (i.text(o._columnText(e, o)), i.active(e.column(o.columns).visible())) }), this.active(e.column(o.columns).visible()) }, destroy: function (n, t, e) { n.off("column-visibility.dt" + e.namespace).off("column-reorder.dt" + e.namespace) }, _columnText: function (n, t) { var e = n.column(t.columns).index(), o = n.settings()[0].aoColumns[e].sTitle.replace(/\n/g, " ").replace(/<br\s*\/?>/gi, " ").replace(/<select(.*?)<\/select>/g, "").replace(/<!\-\-.*?\-\->/g, "").replace(/<.*?>/g, "").replace(/^\s+|\s+$/g, ""); return t.columnText ? t.columnText(n, e, o) : o } }, colvisRestore: { className: "buttons-colvisRestore", text: function (n) { return n.i18n("buttons.colvisRestore", "Restore visibility") }, init: function (t, n, e) { e._visOriginal = t.columns().indexes().map(function (n) { return t.column(n).visible() }).toArray() }, action: function (n, t, e, o) { t.columns().every(function (n) { n = t.colReorder && t.colReorder.transpose ? t.colReorder.transpose(n, "toOriginal") : n, this.visible(o._visOriginal[n]) }) } }, colvisGroup: { className: "buttons-colvisGroup", action: function (n, t, e, o) { t.columns(o.show).visible(!0, !1), t.columns(o.hide).visible(!1, !1), t.columns.adjust() }, show: [], hide: [] } }), t.Buttons });